{"version":3,"file":"index.js","sources":["../../../src/index.ts"],"sourcesContent":["import { defineIntegration } from '@sentry/core';\nimport type { Event, IntegrationFn, StackFrame } from '@sentry/core';\n\nimport { patchWebAssembly } from './patchWebAssembly';\nimport { getImage, getImages } from './registry';\n\nconst INTEGRATION_NAME = 'Wasm';\n\nconst _wasmIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      patchWebAssembly();\n    },\n    processEvent(event: Event): Event {\n      let hasAtLeastOneWasmFrameWithImage = false;\n\n      if (event.exception && event.exception.values) {\n        event.exception.values.forEach(exception => {\n          if (exception.stacktrace && exception.stacktrace.frames) {\n            hasAtLeastOneWasmFrameWithImage =\n              hasAtLeastOneWasmFrameWithImage || patchFrames(exception.stacktrace.frames);\n          }\n        });\n      }\n\n      if (hasAtLeastOneWasmFrameWithImage) {\n        event.debug_meta = event.debug_meta || {};\n        event.debug_meta.images = [...(event.debug_meta.images || []), ...getImages()];\n      }\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const wasmIntegration = defineIntegration(_wasmIntegration);\n\n/**\n * Patches a list of stackframes with wasm data needed for server-side symbolication\n * if applicable. Returns true if the provided list of stack frames had at least one\n * matching registered image.\n */\nfunction patchFrames(frames: Array<StackFrame>): boolean {\n  let hasAtLeastOneWasmFrameWithImage = false;\n  frames.forEach(frame => {\n    if (!frame.filename) {\n      return;\n    }\n    const match = frame.filename.match(/^(.*?):wasm-function\\[\\d+\\]:(0x[a-fA-F0-9]+)$/) as\n      | null\n      | [string, string, string];\n    if (match) {\n      const index = getImage(match[1]);\n      frame.instruction_addr = match[2];\n      frame.filename = match[1];\n      frame.platform = 'native';\n\n      if (index >= 0) {\n        frame.addr_mode = `rel:${index}`;\n        hasAtLeastOneWasmFrameWithImage = true;\n      }\n    }\n  });\n  return hasAtLeastOneWasmFrameWithImage;\n}\n"],"names":[],"mappings":";;;;AAMA,MAAM,gBAAA,GAAmB,MAAM;;AAE/B,MAAM,gBAAiB,IAAG,MAAM;AAChC,EAAE,OAAO;AACT,IAAI,IAAI,EAAE,gBAAgB;AAC1B,IAAI,SAAS,GAAG;AAChB,MAAM,gBAAgB,EAAE;AACxB,KAAK;AACL,IAAI,YAAY,CAAC,KAAK,EAAgB;AACtC,MAAM,IAAI,+BAAgC,GAAE,KAAK;;AAEjD,MAAM,IAAI,KAAK,CAAC,SAAA,IAAa,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE;AACrD,QAAQ,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,SAAA,IAAa;AACpD,UAAU,IAAI,SAAS,CAAC,UAAA,IAAc,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE;AACnE,YAAY,+BAAgC;AAC5C,cAAc,+BAAA,IAAmC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC;AACzF;AACA,SAAS,CAAC;AACV;;AAEA,MAAM,IAAI,+BAA+B,EAAE;AAC3C,QAAQ,KAAK,CAAC,UAAW,GAAE,KAAK,CAAC,UAAA,IAAc,EAAE;AACjD,QAAQ,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,MAAA,IAAU,EAAE,CAAC,EAAE,GAAG,SAAS,EAAE,CAAC;AACtF;;AAEA,MAAM,OAAO,KAAK;AAClB,KAAK;AACL,GAAG;AACH,CAAC,CAAE;;MAEU,eAAgB,GAAE,iBAAiB,CAAC,gBAAgB;;AAEjE;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,MAAM,EAA8B;AACzD,EAAE,IAAI,+BAAgC,GAAE,KAAK;AAC7C,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS;AAC1B,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;AACzB,MAAM;AACN;AACA,IAAI,MAAM,KAAM,GAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,+CAA+C;;AAEhF;AACN,IAAI,IAAI,KAAK,EAAE;AACf,MAAM,MAAM,QAAQ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACtC,MAAM,KAAK,CAAC,gBAAA,GAAmB,KAAK,CAAC,CAAC,CAAC;AACvC,MAAM,KAAK,CAAC,QAAA,GAAW,KAAK,CAAC,CAAC,CAAC;AAC/B,MAAM,KAAK,CAAC,QAAS,GAAE,QAAQ;;AAE/B,MAAM,IAAI,KAAM,IAAG,CAAC,EAAE;AACtB,QAAQ,KAAK,CAAC,SAAU,GAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;AACA,QAAA,+BAAA,GAAA,IAAA;AACA;AACA;AACA,GAAA,CAAA;AACA,EAAA,OAAA,+BAAA;AACA;;;;"}